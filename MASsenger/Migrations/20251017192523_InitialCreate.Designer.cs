// <auto-generated />
using System;
using MASsenger;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MASsenger.Migrations
{
    [DbContext(typeof(MessengerContext))]
    [Migration("20251017192523_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.36");

            modelBuilder.Entity("BaseUserChannel", b =>
                {
                    b.Property<ulong>("ChannelsId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MembersId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ChannelsId", "MembersId");

                    b.HasIndex("MembersId");

                    b.ToTable("BaseUserChannel");
                });

            modelBuilder.Entity("BaseUserGroup", b =>
                {
                    b.Property<ulong>("GroupsId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MembersId")
                        .HasColumnType("INTEGER");

                    b.HasKey("GroupsId", "MembersId");

                    b.HasIndex("MembersId");

                    b.ToTable("BaseUserGroup");
                });

            modelBuilder.Entity("BotUser", b =>
                {
                    b.Property<int>("BotsId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MembersId")
                        .HasColumnType("INTEGER");

                    b.HasKey("BotsId", "MembersId");

                    b.HasIndex("MembersId");

                    b.ToTable("BotUser");
                });

            modelBuilder.Entity("MASsenger.BaseMsg", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<ulong?>("ChannelId")
                        .HasColumnType("INTEGER");

                    b.Property<ulong?>("DirectChatId")
                        .HasColumnType("INTEGER");

                    b.Property<ulong?>("GroupId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ChannelId");

                    b.HasIndex("DirectChatId");

                    b.HasIndex("GroupId");

                    b.ToTable("BaseMsg");
                });

            modelBuilder.Entity("MASsenger.BaseUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<ulong?>("ChannelId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<ulong?>("DirectChatId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<ulong?>("GroupId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ProfilePictureUrl")
                        .HasColumnType("TEXT");

                    b.Property<int?>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Username")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ChannelId");

                    b.HasIndex("DirectChatId");

                    b.HasIndex("GroupId");

                    b.HasIndex("UserId");

                    b.ToTable("BaseUser");

                    b.HasDiscriminator<string>("Discriminator").HasValue("BaseUser");
                });

            modelBuilder.Entity("MASsenger.Channel", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("OwnerId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Channels");
                });

            modelBuilder.Entity("MASsenger.DirectChat", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("DirectChats");
                });

            modelBuilder.Entity("MASsenger.Group", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("OwnerId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("MASsenger.Bot", b =>
                {
                    b.HasBaseType("MASsenger.BaseUser");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OwnerId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasIndex("OwnerId");

                    b.HasDiscriminator().HasValue("Bot");
                });

            modelBuilder.Entity("MASsenger.User", b =>
                {
                    b.HasBaseType("MASsenger.BaseUser");

                    b.HasDiscriminator().HasValue("User");
                });

            modelBuilder.Entity("BaseUserChannel", b =>
                {
                    b.HasOne("MASsenger.Channel", null)
                        .WithMany()
                        .HasForeignKey("ChannelsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MASsenger.BaseUser", null)
                        .WithMany()
                        .HasForeignKey("MembersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BaseUserGroup", b =>
                {
                    b.HasOne("MASsenger.Group", null)
                        .WithMany()
                        .HasForeignKey("GroupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MASsenger.BaseUser", null)
                        .WithMany()
                        .HasForeignKey("MembersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BotUser", b =>
                {
                    b.HasOne("MASsenger.Bot", null)
                        .WithMany()
                        .HasForeignKey("BotsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MASsenger.User", null)
                        .WithMany()
                        .HasForeignKey("MembersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MASsenger.BaseMsg", b =>
                {
                    b.HasOne("MASsenger.Channel", null)
                        .WithMany("Messages")
                        .HasForeignKey("ChannelId");

                    b.HasOne("MASsenger.DirectChat", null)
                        .WithMany("Messages")
                        .HasForeignKey("DirectChatId");

                    b.HasOne("MASsenger.Group", null)
                        .WithMany("Messages")
                        .HasForeignKey("GroupId");
                });

            modelBuilder.Entity("MASsenger.BaseUser", b =>
                {
                    b.HasOne("MASsenger.Channel", null)
                        .WithMany("Admins")
                        .HasForeignKey("ChannelId");

                    b.HasOne("MASsenger.DirectChat", null)
                        .WithMany("Members")
                        .HasForeignKey("DirectChatId");

                    b.HasOne("MASsenger.Group", null)
                        .WithMany("Admins")
                        .HasForeignKey("GroupId");

                    b.HasOne("MASsenger.User", null)
                        .WithMany("Blocked")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("MASsenger.Channel", b =>
                {
                    b.HasOne("MASsenger.BaseUser", "Owner")
                        .WithMany("ChannelsOwned")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("MASsenger.Group", b =>
                {
                    b.HasOne("MASsenger.BaseUser", "Owner")
                        .WithMany("GroupsOwned")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("MASsenger.Bot", b =>
                {
                    b.HasOne("MASsenger.User", "Owner")
                        .WithMany("BotsOwned")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("MASsenger.BaseUser", b =>
                {
                    b.Navigation("ChannelsOwned");

                    b.Navigation("GroupsOwned");
                });

            modelBuilder.Entity("MASsenger.Channel", b =>
                {
                    b.Navigation("Admins");

                    b.Navigation("Messages");
                });

            modelBuilder.Entity("MASsenger.DirectChat", b =>
                {
                    b.Navigation("Members");

                    b.Navigation("Messages");
                });

            modelBuilder.Entity("MASsenger.Group", b =>
                {
                    b.Navigation("Admins");

                    b.Navigation("Messages");
                });

            modelBuilder.Entity("MASsenger.User", b =>
                {
                    b.Navigation("Blocked");

                    b.Navigation("BotsOwned");
                });
#pragma warning restore 612, 618
        }
    }
}
